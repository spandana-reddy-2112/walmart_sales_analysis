select * from walmart;
-- BUSSINESS PROBLEMS
-- Q1. Find different payement method and number of transactions, number of qty sold?
select 
	payment_method,
	count(*) as no_of_transactions,
	sum(quantity) as no_of_quantity
from walmart
group by payment_method


--Q2. Identify the highest-rated category in each branch, displaying the branch, category
--AVG RATING
select *
from 
( select branch,
       category,
	   Avg(rating) as avg_rating, 
       Rank() over(partition by branch order by avg(rating) DESC) as rank
	   from walmart
group by 1,2
)
where rank =1 ;



-- Q3. Identify the busiest day for each branch based on the number of transactions

SELECT *
FROM (
    SELECT
        branch,
        TO_DATE(date, 'DD/MM/YY') AS transaction_date,
        COUNT(*) AS no_transactions,
        RANK() OVER (PARTITION BY branch ORDER BY COUNT(*) DESC) AS rank
    FROM walmart
    GROUP BY branch, TO_DATE(date, 'DD/MM/YY')
)

 
-- Q4. Calculate the total quantity of items sold per payment method. List payment_method and total_quantity.


select 
	payment_method,
	count(*) as no_of_transactions,
	sum(quantity) as no_of_quantity

from walmart
group by payment_method





-- Q.5|
-- Determine the average, minimum, and maximum rating of products for each city.
-- List the city, average_rating, min_rating, and max_rating.


select
	city,
	category,
	MIN(rating) as min_rating,
	MAX(rating) as max_rating,
	AVG(rating) as avg_rating
from walmart
group by 1,2


--Q. 6
--Calculate the total profit for each category by considering total_profit as
--(unit_price * quantity * profit_margin). List category and total_profit, ordered from highest to lowest profit.
select 
	category,
	sum(total) as total_revenue,
	sum(total* profit_margin) as profit
from walmart
group by 1 




--Q.7
--Determine the most common payment method for each Branch. 
--Display Branch and the preferred_payment_method.
with cte 
as 
(select  	
 branch,
 payment_method,
 count(*) as total_trans,
 rank() over(partition by branch order by count(*) DESC) as rank
from walmart
group by 1,2
)
select *
from cte
where rank=1


--Q.8
-- Categorize sales into 3 group MORNING, AFTERNOON, EVENING
-- Find out each of the shift and number of invoices


SELECT
branch,
	CASE
		WHEN EXTRACT (HOUR FROM (time:: time) )< 12 THEN 'Morning'
		WHEN EXTRACT (HOUR FROM (time:: time)) BETWEEN 12 AND 17 THEN 'Afternoon'
		ELSE'Evening'
	END day_time,
	count(*)
FROM walmart
GROUP BY 1,2
order by 1,3 desc



--Q.9
-- Identify 5 branch with highest decrese ratio in
-- revevenue compare to last year(current year 2023 and last year 2022)

WITH revenue_2022 AS (
    SELECT
        branch,
        SUM(total::numeric) AS revenue
    FROM walmart
    WHERE EXTRACT(YEAR FROM TO_DATE(date, 'DD/MM/YY')) = 2022
    GROUP BY branch
),
revenue_2023 AS (
    SELECT
        branch,
        SUM(total::numeric) AS revenue
    FROM walmart
    WHERE EXTRACT(YEAR FROM TO_DATE(date, 'DD/MM/YY')) = 2023
    GROUP BY branch
)

SELECT 
    r22.branch,
    r22.revenue AS last_year_revenue,
    r23.revenue AS current_year_revenue,
    ROUND(
        ((r22.revenue - r23.revenue) * 100.0) / r22.revenue, 2
    ) AS revenue_difference_ratio

FROM revenue_2022 r22
JOIN revenue_2023 r23
    ON r22.branch = r23.branch
WHERE r22.revenue > r23.revenue
ORDER BY revenue_difference_ratio DESC
LIMIT 5;


